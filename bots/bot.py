import json
import os
import time

import apiai
import telebot
from telebot.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

import detail
import logger
from databases.database import Database
from parsers.parser_manager import ParserManager


class Bot:
    def __init__(self):
        self.bot = telebot.TeleBot(os.environ.get("token"))

        self.book_to_delete = {}
        self.book_to_add = {}

    def typing(self, secs, message: Message):
        self.bot.send_chat_action(message.chat.id, "typing")
        time.sleep(secs)

    def uploading_photo(self, secs, message: Message):
        self.bot.send_chat_action(message.chat.id, "upload_photo")
        time.sleep(secs)

    def start_user(self, message: Message):
        logger.show_msg(message)
        database = Database()
        database.start_following(message.chat.id)
        self.typing(1, message)
        self.bot.send_message(chat_id=message.from_user.id, parse_mode='Markdown',
                              text="–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏!\n"
                                   "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É, –Ω–∞–ø–∏—à–∏:\n`–¥–æ–±–∞–≤–∏—Ç—å [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]`")

    def show_list(self, message: Message):
        logger.show_msg(message)
        database = Database()
        parser = ParserManager()
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="delete_book"))

        subscriptions = database.get_subscriptions(message.chat.id)

        if not subscriptions:
            self.typing(0.3, message)
            self.bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ü§ï")

        else:
            for subscription in database.get_subscriptions(message.chat.id):
                detail_book = parser.parsing_book(subscription)
                self.uploading_photo(0.2, message)
                reply_msg = self.bot.send_photo(chat_id=message.chat.id,
                                                photo=open(f"images/{detail_book['image_name']}", 'rb'),
                                                caption=f"{detail_book['title']} ({detail_book['price']}—Ä.)",
                                                reply_markup=markup)

                self.book_to_delete[reply_msg.message_id] = detail_book

    def show_help(self, message: Message):
        logger.show_msg(message)
        self.typing(2, message)
        self.bot.send_message(chat_id=message.chat.id,
                              text="–Ø, –∫–∞–∫ —á–∏—Å—Ç–æ–∫—Ä–æ–≤–Ω—ã–π —Ä–æ–±–æ—Ç, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ —Å–æ–π—Ç–∏ —Å —É–º–∞ –≤ –º–∏—Ä–µ –∫–Ω–∏–∂–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ ü§ñ\n"
                                   "*–Ω–µ—Ç, —è –Ω–µ —É–Ω–∏—á—Ç–æ–∂—É –º–∏—Ä üôÑ*\n\n"
                                   "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, —Ç–æ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /start\n"
                                   "–ï—Å–ª–∏ –∂–µ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∏ –≤–ø—Ä–µ–¥—å –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π, "
                                   "–æ—Ç–ø—Ä–∞–≤—å /stop\n"
                                   "–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É? –ù–∞–∂–∏–º–∞–π /list\n"
                                   "–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–æ–¥ –∏–ª–∏ –∫–∏–Ω—É—Ç—å –¥–æ–Ω–∞—Ç? –¢–µ–±–µ —Å—é–¥–∞ /about")

    def show_about(self, message: Message):
        logger.show_msg(message)
        self.typing(1, message)
        self.bot.send_message(chat_id=message.chat.id, parse_mode='Markdown',
                              text="`–Ø —è–≤–ª—è—é—Å—å –Ω–µ–±–æ–ª—å—à–∏–º –ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç–æ–º –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–∫–∏–¥–æ–∫ ü§ñ\n"
                                   "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏?\n–í–∞—à–∞ –≤–æ–ª—è, –≥–æ—Å–ø–æ–¥–∏–Ω!`\n"
                                   "https://github.com/ars-kalinichenko/BookSalesBot")

    def stop_user(self, message: Message):
        logger.show_msg(message)
        database = Database()
        database.stop_following(message.chat.id)
        self.typing(1, message)
        self.bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ—â–∞–π—Ç–µ.\n"
                                                            "–ù–∞–¥–µ–µ–º—Å—è, –≤—ã –≤–µ—Ä–Ω—ë—Ç–µ—Å—å üòå")

    def small_talk(self, message: Message):
        logger.show_msg(message)
        request = apiai.ApiAI(os.environ.get("smalltalk")).text_request()
        request.lang = 'ru'
        request.query = message.text
        response_json = json.loads(request.getresponse().read().decode('utf-8'))
        response = response_json['result']['fulfillment']['speech']
        self.typing(1, message)

        logger.show_msg(self.bot.send_message(chat_id=message.from_user.id, text=response))

    def adding_book(self, message: Message):
        logger.show_msg(message)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="–î–∞", callback_data="add_link"))
        markup.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_add_link"))
        parser = ParserManager()

        try:
            link = message.text.lower().split('–¥–æ–±–∞–≤–∏—Ç—å')[-1].strip()
            book = parser.parsing_book(link)
            case_rub = f'—Ä—É–±–ª{detail.ruble_cases[book["price"] % 100]}'

            self.uploading_photo(0.5, message)
            reply_msg: Message = self.bot.send_photo(message.chat.id,
                                                     photo=open(f"images/{book['image_name']}", 'rb'),
                                                     caption='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:\n'
                                                     f'"{book["title"]}" –∑–∞ {book["price"]} {case_rub}?',
                                                     reply_markup=markup)

            self.book_to_add[reply_msg.message_id] = book

        except (TypeError, AttributeError):
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!")

    def send_notification(self, chat_id: int, book_detail: dict, sale: int):
        notification = self.bot.send_photo(chat_id, photo=open(f"images/{book_detail['image_name']}", 'rb'),
                                           caption=f'–ö–Ω–∏–≥–∞ "{book_detail["title"]}"\n'
                                           f'–ø–æ–¥–µ—à–µ–≤–µ–ª–∞ –Ω–∞ {sale}% ({book_detail["price"]}—Ä.)')
        logger.show_msg(notification)

    def callback_handler(self, call):
        if call.data == 'add_link':
            try:
                self.add_book(call)
            except KeyError as er:
                self.bot.answer_callback_query(callback_query_id=call.id,
                                               text='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑ ‚ùå')
                logger.show_error(system="Bot.book_to_db()", error=repr(er))
            else:
                self.bot.answer_callback_query(callback_query_id=call.id, text='–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')

        elif call.data == 'no_add_link':
            self.bot.answer_callback_query(callback_query_id=call.id, text='–û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ–µ–≥–æ–ª–æ–≤–æ–∫, —Å—ç—Ä üë®üèº‚Äç‚úàÔ∏è')

        elif call.data == "delete_book":
            self.delete_book(call)

        try:
            self.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                               message_id=call.message.message_id)
            self.book_to_add.pop(call.message.message_id)
        except:
            pass

    def delete_book(self, call):
        database = Database()
        link = self.book_to_delete[call.message.message_id]['link']
        database.delete_subscription(call.message.chat.id, link)
        self.bot.answer_callback_query(callback_query_id=call.id, text='–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞')

    def add_book(self, call):
        database = Database()
        book_ = self.book_to_add[call.message.message_id]
        database.insert_book(book_, [call.message.chat.id])
        database.insert_follower([book_['link']], call)
        database.start_following(call.message.chat.id)
